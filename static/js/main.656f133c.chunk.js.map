{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","App.js","index.js"],"names":["TodoItem","title","id","completed","changeStatus","deleteTodo","useState","changingTitle","setChangingTitle","className","onDoubleClick","type","checked","onChange","onClick","TodoList","filteredTodos","changeStatusAll","every","todo","htmlFor","map","key","App","FILTERS","todos","setTodos","newTodo","setNewTodo","filter","setFilter","useMemo","todosList","filters","item","changeFilter","onSubmit","event","todoToAdd","preventDefault","Date","placeholder","value","target","length","some","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.656f133c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({\n  title,\n  id,\n  completed,\n  changeStatus,\n  deleteTodo,\n}) => {\n  const [changingTitle, setChangingTitle] = useState(false);\n\n  return (\n    <li\n      className={completed ? 'completed' : ''}\n      onDoubleClick={() => {\n        setChangingTitle(!changingTitle);\n      }}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => {\n            changeStatus(id);\n          }}\n        />\n        <label>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            deleteTodo(id);\n          }}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  filteredTodos,\n  changeStatusAll,\n  changeStatus,\n  deleteTodo,\n}) => (\n  <section className=\"main\">\n\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={filteredTodos.every(todo => todo.completed)}\n      onChange={() => {\n        changeStatusAll();\n      }}\n    />\n\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    <ul className=\"todo-list\">\n      {filteredTodos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          title={todo.title}\n          id={todo.id}\n          completed={todo.completed}\n          changeStatus={changeStatus}\n          deleteTodo={deleteTodo}\n        />\n      ))}\n\n      {/*\n\n        <li className=\"completed\">\n        <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" />\n        <label>qwertyuio</label>\n        <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n        </li>\n\n        <li className=\"editing\">\n        <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" />\n        <label>zxcvbnm</label>\n        <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n        </li>\n\n        <li>\n        <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" />\n        <label>1234567890</label>\n        <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n        </li>\n\n        */}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  changeStatusAll: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","\nimport React, { useState, useMemo } from 'react';\nimport { TodoList } from './components/TodoList';\n\nconst App = () => {\n  const FILTERS = { all: 'all', active: 'active', completed: 'completed' };\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const [filter, setFilter] = useState(FILTERS.all);\n\n  const addTodo = (todoToAdd) => {\n    setTodos([...todos, todoToAdd]);\n  };\n\n  const changeStatus = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const changeStatusAll = () => {\n    if (todos.some(todo => !todo.completed)) {\n      setTodos(todos.map(todo => ({ ...todo, completed: true })));\n    } else {\n      setTodos(todos.map(todo => ({ ...todo, completed: false })));\n    }\n  };\n\n  const changeFilter = (todosList, filters) => {\n    switch (filters) {\n      case FILTERS.active:\n        return todosList.filter(item => !item.completed);\n\n      case FILTERS.completed:\n        return todosList.filter(item => item.completed);\n\n      default:\n        return todosList;\n    }\n  };\n\n  const filteredTodos = useMemo(\n    () => changeFilter(todos, filter),\n    [todos, filter],\n  );\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const deleteAllCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            addTodo({\n              title: newTodo,\n              id: +new Date(),\n              completed: false,\n            });\n            setNewTodo('');\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo}\n            onChange={(event) => {\n              setNewTodo(event.target.value);\n            }}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0\n        && (\n          <>\n            <TodoList\n              filteredTodos={filteredTodos}\n              changeStatusAll={changeStatusAll}\n              changeStatus={changeStatus}\n              deleteTodo={deleteTodo}\n            />\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {todos.filter(todo => !todo.completed).length}\n                {' '}\n                items left\n              </span>\n\n              <ul className=\"filters\">\n                <li>\n                  <a\n                    href=\"#/\"\n                    className={\n                      filter === FILTERS.all ? 'selected' : ''\n                    }\n                    onClick={() => setFilter(FILTERS.all)\n                    }\n                  >\n                    All\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#/active\"\n                    className={\n                      filter === FILTERS.active ? 'selected' : ''\n                    }\n                    onClick={() => setFilter(FILTERS.active)\n                    }\n                  >\n                    Active\n                  </a>\n                </li>\n\n                <li>\n                  <a\n                    href=\"#/completed\"\n                    className={\n                      filter === FILTERS.completed ? 'selected' : ''\n                    }\n                    onClick={() => setFilter(FILTERS.completed)\n                    }\n                  >\n                    Completed\n                  </a>\n                </li>\n              </ul>\n\n              {todos.filter(todo => todo.completed).length > 0\n              && (\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  onClick={() => deleteAllCompleted()}\n                >\n                  Clear completed\n                </button>\n              )\n              }\n            </footer>\n          </>\n        )\n      }\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}